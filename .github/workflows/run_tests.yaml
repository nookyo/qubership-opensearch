name: Run Opensearch Pipeline

permissions:
  contents: read
  statuses: write
  actions: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      example_input:
        description: 'An example input'
        required: false
        default: 'default value'
#   workflow_run:
#     workflows: ["Build"]
#     types:
#       - completed
#     branches:
#       - main

jobs:
  run-tests:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request'
    steps:
      - name: Get PR data
        uses: actions/github-script@v8
        id: pr-data
        with:
          script: |
            const headBranch = context.payload.workflow_run.head_branch;
            console.log('Looking for PR with head branch:', headBranch);
            
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${headBranch}`,
              state: 'open'
            });
            
            if (pullRequests.length === 0) {
              console.log('No open PR found for head branch:', headBranch);
              return null;
            }
            
            const pr = pullRequests[0];
            
            if (pr.base.ref !== 'main') {
              console.log('PR is not to main branch, skipping');
              return null;
            }
            
            console.log('Found PR:', pr.number);
            console.log('Head branch:', pr.head.ref);
            console.log('Base branch:', pr.base.ref);
            console.log('Head SHA:', pr.head.sha);
            
            return {
              number: pr.number,
              head_branch: pr.head.ref,
              base_branch: pr.base.ref,
              head_sha: pr.head.sha
            };

      - name: Set pending status
        if: fromJson(steps.pr-data.outputs.result) != null
        uses: actions/github-script@v8
        with:
          script: |
            const prData = ${{ steps.pr-data.outputs.result }};
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: prData.head_sha,
              state: 'pending',
              description: 'Running tests...',
              context: 'run-tests-pipeline'
            });
            
      - name: Show PR info
        if: fromJson(steps.pr-data.outputs.result) != null
        run: |
          echo "PR Number: ${{ fromJson(steps.pr-data.outputs.result).number }}"
          echo "Head Branch: ${{ fromJson(steps.pr-data.outputs.result).head_branch }}"
          echo "Base Branch: ${{ fromJson(steps.pr-data.outputs.result).base_branch }}"
          echo "Head SHA: ${{ fromJson(steps.pr-data.outputs.result).head_sha }}"

      - name: Set success status
        if: success() && fromJson(steps.pr-data.outputs.result) != null
        uses: actions/github-script@v8
        with:
          script: |
            const prData = ${{ steps.pr-data.outputs.result }};
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: prData.head_sha,
              state: 'success',
              description: 'Tests completed successfully',
              context: 'run-tests-pipeline'
            });

      - name: Set failure status
        if: failure() && fromJson(steps.pr-data.outputs.result) != null
        uses: actions/github-script@v8
        with:
          script: |
            const prData = ${{ steps.pr-data.outputs.result }};
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: prData.head_sha,
              state: 'failure',
              description: 'Tests failed',
              context: 'run-tests-pipeline'
            });      
              
  #   uses: Netcracker/qubership-terraform-hub/.github/workflows/ec2-control.yml@main
  #   with:
  #     instance_id: ${{ vars.AWS_GITHUB_RUNNER_ID }}
  #     action: "start"
  #   secrets:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Opensearch-Pipeline:
  #   if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
  #   needs: start-self-hosted-runner
  #   uses: Netcracker/qubership-test-pipelines/.github/workflows/opensearch.yaml@e75a24c6a1e5d843de60674e9a395ecb003f5cf3
  #   with:
  #     service_branch: "${{ github.event.workflow_run.head_branch }}"
  #     versions_file: ".github/versions.yaml"
  #     pipeline_branch: "e75a24c6a1e5d843de60674e9a395ecb003f5cf3" #this value must match the value after '@' in 'uses'
  #     runner_type: "self-hosted"
  #   secrets:
  #     AWS_S3_ACCESS_KEY_ID: ${{secrets.AWS_S3_ACCESS_KEY_ID}}
  #     AWS_S3_ACCESS_KEY_SECRET: ${{secrets.AWS_S3_ACCESS_KEY_SECRET}}

  # stop-self-hosted-runner:
  #   if: always() && github.event.workflow_run.event == 'pull_request'
  #   needs: Opensearch-Pipeline
  #   uses: Netcracker/qubership-terraform-hub/.github/workflows/ec2-control.yml@main
  #   with:
  #     instance_id: ${{ vars.AWS_GITHUB_RUNNER_ID }}
  #     action: "stop"
  #   secrets:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
