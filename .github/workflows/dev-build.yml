name: Build
run-name: "Image for ${{ github.event.repository.name }}: ${{ github.run_number }} - ${{ github.actor }}"
on:
  release:
    types: [created]
  push:
    branches:
      - "**"
    paths-ignore:
      - "docs/**"
      - "CODE-OF-CONDUCT.md"
      - "CONTRIBUTING.md"
      - "LICENSE"
      - "README.md"
      - "SECURITY.md"
  pull_request:
    branches:
      - "**"
    paths-ignore:
      - "docs/**"
      - "CODE-OF-CONDUCT.md"
      - "CONTRIBUTING.md"
      - "LICENSE"
      - "README.md"
      - "SECURITY.md"
  workflow_dispatch:
    inputs:
      tags:
        required: false
        type: string
        default: ""
        description: "Tags"
      dry-run:
        required: true
        type: boolean
        default: false
        description: "Dry run mode"
permissions:
  contents: read
  packages: write

jobs:
  prepare:
    name: "Prepare Images and Metadata"
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.load.outputs.components }}
      platforms: ${{ steps.load.outputs.platforms }}
      metadata: "${{ steps.meta.outputs.result }}"
    steps:
      - uses: actions/checkout@v4

      - id: load
        run: |
          echo "components=$(jq -c '.components' .github/dev-build-config.json)" >> "$GITHUB_OUTPUT"
          echo "platforms=$(jq -c '.platforms' .github/dev-build-config.json)" >> "$GITHUB_OUTPUT"

      - name: Create tags for images
        uses: netcracker/qubership-workflow-hub/actions/metadata-action@v1.0.7
        id: meta
        with:
          extra-tags: ${{ github.event.inputs.tags }}
          default-template: "{{ref-name}}"
          dry-run: ${{ inputs.dry-run }}

  # build:
  #   name: Build Docker Images
  #   needs: [prepare]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       component: ${{ fromJson(needs.prepare.outputs.components) }}
  #   steps:
  #     - name: Docker
  #       uses: netcracker/qubership-workflow-hub/actions/docker-action@v1.0.7
  #       with:
  #         ref: ${{ github.ref }}
  #         dry-run: ${{ inputs.dry-run }}
  #         download-artifact: false
  #         component: ${{ toJson(matrix.component) }}
  #         platforms: ${{ needs.prepare.outputs.platforms }}
  #         tags: ${{ needs.prepare.outputs.metadata }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-pipeline-run:
    # needs: build
    runs-on: ubuntu-latest
    permissions:
      actions: write
    if: success() && github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
    steps:
      - name: Inspect context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "PR number: ${{ github.event.number || 'N/A' }}"
          echo "PR head ref: ${{ github.event.pull_request.head.ref || 'N/A' }}"
          echo "PR head sha: ${{ github.event.pull_request.head.sha || 'N/A' }}"
          echo "PR base ref: ${{ github.event.pull_request.base.ref || 'N/A' }}"

      - name: Trigger Run Opensearch Pipeline
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            console.log('PR head ref:', pr.head.ref);
            console.log('PR head sha:', pr.head.sha);
            console.log('PR base ref:', pr.base.ref);
            console.log('PR number:', pr.number);
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'run_tests.yaml',
              ref: 'main',
              inputs: {
                head_branch: pr.head.ref,
                head_sha: pr.head.sha,
                base_branch: pr.base.ref,
                pr_number: `${pr.number}`
              }
            })
